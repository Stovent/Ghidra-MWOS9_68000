/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package os9;

// import java.util.OptionalInt;

import java.util.Arrays;

import ghidra.app.services.AbstractAnalyzer;
import ghidra.app.services.AnalysisPriority;
import ghidra.app.services.AnalyzerType;
import ghidra.app.util.importer.MessageLog;
import ghidra.framework.options.Options;
// import ghidra.program.flatapi.FlatProgramAPI;
import ghidra.program.model.address.Address;
import ghidra.program.model.address.AddressSetView;
import ghidra.program.model.lang.OperandType;
import ghidra.program.model.listing.CodeUnit;
import ghidra.program.model.listing.Data;
import ghidra.program.model.listing.Instruction;
import ghidra.program.model.listing.Listing;
import ghidra.program.model.listing.Program;
import ghidra.program.model.mem.MemoryAccessException;
import ghidra.program.model.scalar.Scalar;
import ghidra.program.model.symbol.SourceType;
import ghidra.program.model.symbol.SymbolTable;
import ghidra.util.Msg;
import ghidra.util.exception.CancelledException;
import ghidra.util.exception.InvalidInputException;
import ghidra.util.task.TaskMonitor;
import os9.kernel.SystemCallInfo;
import os9.kernel.SystemCallRegistry;

/**
 * Converts __os9_syscall instruction to the actual system call.
 */
public class OS9SystemCallAnalyzer extends AbstractAnalyzer {

	public OS9SystemCallAnalyzer() {
		super("OS-9 Syscall Analyzer", "Detects OS-9 system calls in disassembled code", AnalyzerType.INSTRUCTION_ANALYZER);
        setPriority(AnalysisPriority.DISASSEMBLY);
	}

	@Override
	public boolean getDefaultEnablement(Program program) {
		return true;
	}

	@Override
	public boolean canAnalyze(Program program) {
		boolean able = program.getLanguageID().equals(OS9Loader.LANGUAGE_ID);
		// Msg.showInfo(this, null, "OS9SystemCallAnalyzer", String.format("canAnalyze %b", able));

		return able;
	}

	@Override
	public void registerOptions(Options options, Program program) {

		// If this analyzer has custom options, register them here

		// options.registerOption("Option name goes here", false, null, "Option description goes here");
	}

	@Override
	public boolean added(Program program, AddressSetView set, TaskMonitor monitor, MessageLog log)
			throws CancelledException {

		Listing listing = program.getListing();
		// FlatProgramAPI api = new FlatProgramAPI(program);

		for(Instruction inst : listing.getInstructions(true)) {
			if(isSystemCall(inst)) {
				long syscallNumber = getSyscallNumber(inst, log);
				annotateSyscall(inst, syscallNumber, log);
				// Msg.showInfo(this, null, "OS9SystemCallAnalyzer", String.format("%H %H", inst.getAddress().getOffset(), syscallNumber));
				// api.createBookmark(inst.getAddress(), "syscall", String.format("syscall %02X", number.getAsInt()));
				// patchSystemCall(program, listing, inst);
			}
		}

		return false;
	}

	static boolean isSystemCall(Instruction inst) {
		return inst.getMnemonicString().equals("os9");
	}

	static long getSyscallNumber(Instruction inst, MessageLog log) {
		int operandType = inst.getOperandType(0);
		
		if (OperandType.isScalar(operandType)) {
			return inst.getScalar(0).getUnsignedValue();
		}

		throw new IllegalArgumentException("Can't get system call number: operand 0 is not a scalar");
	}

	void annotateSyscall(Instruction inst, long syscallNumber, MessageLog log) {
		SystemCallInfo info = SystemCallRegistry.get(syscallNumber);
		if(info != null) {
			// createLabel ?
			inst.setComment(CodeUnit.EOL_COMMENT, info.name);
		}
		else {
			log.appendMsg("Unknown system call number " + syscallNumber);
		}
	}

	// private void patchSystemCall(Program program, Listing listing, Instruction inst) {
	// 	if(!inst.getMnemonicString().equalsIgnoreCase("trap")) {
	// 		return;
	// 	}

	// 	Scalar trapNumber = inst.getScalar(0);
	// 	if(trapNumber == null || trapNumber.getValue() != 0) {
	// 		return;
	// 	}

	// 	Address instAddress = inst.getAddress();
	// 	Address syscallNumberAddress = instAddress.add(2);
	// 	Data syscallNumber = listing.getDataAt(syscallNumberAddress);
	// 	String syscallName = "A";
	// 	try {
	// 		syscallName = String.format("F$Syscall %02X", syscallNumber.getShort(0));
	// 	}
	// 	catch(MemoryAccessException e) {
	// 		e.printStackTrace();
	// 	}

	// 	SymbolTable symbolTable = program.getSymbolTable();

	// 	try {
	// 		listing.clearCodeUnits(instAddress, syscallNumberAddress, false);
	// 		if (symbolTable.getSymbol(syscallName, instAddress, null) == null) {
    //     		symbolTable.createLabel(instAddress, syscallName, SourceType.ANALYSIS);
    // 		}
	// 		inst.setComment(CodeUnit.EOL_COMMENT, "OS-9 Syscall #" + syscallNumber);
	// 	}
	// 	catch(InvalidInputException e) {
	// 		e.printStackTrace();
	// 	}
	// }
}
